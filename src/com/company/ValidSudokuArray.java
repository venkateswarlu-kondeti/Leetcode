package com.company;

import java.util.HashSet;

public class ValidSudokuArray {
    public boolean isValidSudoku(char[][] board) {
        HashSet<Character> h = new HashSet<>();
        boolean statusRow = true;
        boolean statusRL = true;
        boolean statusColumn = true;
        boolean statusCL = true;
        boolean statusSubBox = true;
        boolean statusSBL = true;
        int j = 0, k = 0, m = 0, q = 0, p = 0;
        while (j < 9) {
            for (int i = 0; i < 9; i++) {
                if (board[j][i] != '.' && h.add(board[j][i]) == true) {
                    statusRL = true;
                } else if (board[j][i] != '.') {
                    statusRL = false;
                }
                statusRow = statusRow & statusRL;

            }
            h.clear();
            j++;
        }
        while (k < 9) {
            for (int i = 0; i < 9; i++) {
                if (board[i][k] != '.' && h.add(board[i][k]) == true) {
                    statusCL = true;
                } else if (board[i][k] != '.') {
                    statusCL = false;
                }
                statusColumn = statusColumn & statusCL;
            }
            h.clear();
            k++;
        }
        while (p < 9 && q < 9) {
            while (m < p + 3) {
                for (int i = q; i < q + 3; i++) {
                    if (board[m][i] != '.' && h.add(board[m][i]) == true) {
                        statusSBL = true;
                    } else if (board[m][i] != '.') {
                        statusSBL = false;
                    }
                    statusSubBox = statusSubBox & statusSBL;
                }
                m++;
            }
            q = q + 3;
            if (p == 0) {
                m = 0;
            } else if (p == 3) {
                m = 3;
            } else {
                m = 6;
            }
            h.clear();
            if (q == 9) {
                p = p + 3;
                m = m + 3;
                q = 0;
            }
        }
        return (statusRow & statusColumn & statusSubBox);
    }

    public static void main(String[] args) {
//        char[][] board = {{'5', '3', '.', '.', '7', '.', '.', '.', '.'}
//                        , {'6', '.', '.', '1', '9', '5', '.', '.', '.'}
//                        , {'.', '9', '8', '.', '.', '.', '.', '6', '.'}
//                        , {'8', '.', '.', '.', '6', '.', '.', '.', '3'}
//                        , {'4', '.', '.', '8', '.', '3', '.', '.', '1'}
//                        , {'7', '.', '.', '.', '2', '.', '.', '.', '6'}
//                        , {'.', '6', '.', '.', '.', '.', '2', '8', '.'}
//                        , {'.', '.', '.', '4', '1', '9', '.', '.', '5'}
//                        , {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
//        char[][] board=     {{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}};
//        char[][] board=     {{'.','.','.','.','.','.','.','.','2'}
//                            ,{'.','.','.','.','.','.','6','.','.'}
//                            ,{'.','.','1','4','.','.','8','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','3','.','.','.','.'}
//                            ,{'5','.','8','6','.','.','.','.','.'}
//                            ,{'.','9','.','.','.','.','4','.','.'}
//                            ,{'.','.','.','.','5','.','.','.','.'}};
//        char[][] board=     {{'.','.','.','.','.','.','.','.','.'}
//                            ,{'4','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','.','.','.','.','6','.','.'}
//                            ,{'.','.','.','3','8','.','.','.','.'}
//                            ,{'.','5','.','.','.','6','.','.','1'}
//                            ,{'8','.','.','.','.','.','.','6','.'}
//                            ,{'.','.','.','.','.','.','.','.','.'}
//                            ,{'.','.','7','.','9','.','.','.','.'}
//                            ,{'.','.','.','6','.','.','.','.','.'}};
        char[][] board=     {{'.','.','4','.','.','.','6','3','.'}
                            ,{'.','.','.','.','.','.','.','.','.'}
                            ,{'5','.','.','.','.','.','.','9','.'}
                            ,{'.','.','.','5','6','.','.','.','.'}
                            ,{'4','.','3','.','.','.','.','.','.'}
                            ,{'.','.','.','7','.','.','.','.','.'}
                            ,{'.','.','.','5','.','.','.','.','.'}
                            ,{'.','.','.','.','.','.','.','.','.'}
                            ,{'.','.','.','.','.','.','.','.','.'}};

        ValidSudokuArray vs = new ValidSudokuArray();
        vs.isValidSudoku(board);
        System.out.println("Valid sudoku?: " + vs.isValidSudoku(board));
    }
}
